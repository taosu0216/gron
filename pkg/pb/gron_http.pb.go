// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: gron.proto

package pb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGronCreateTimer = "/gron.Gron/CreateTimer"
const OperationGronEnableTimer = "/gron.Gron/EnableTimer"

type GronHTTPServer interface {
	CreateTimer(context.Context, *CreateTimerRequest) (*CreateTimerResp, error)
	EnableTimer(context.Context, *EnableTimerRequest) (*EnableTimerResp, error)
}

func RegisterGronHTTPServer(s *http.Server, srv GronHTTPServer) {
	r := s.Route("/")
	r.POST("/gron/create_timer", _Gron_CreateTimer0_HTTP_Handler(srv))
	r.POST("/gron/enable_timer", _Gron_EnableTimer0_HTTP_Handler(srv))
}

func _Gron_CreateTimer0_HTTP_Handler(srv GronHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTimerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGronCreateTimer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTimer(ctx, req.(*CreateTimerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTimerResp)
		return ctx.Result(200, reply)
	}
}

func _Gron_EnableTimer0_HTTP_Handler(srv GronHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EnableTimerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGronEnableTimer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EnableTimer(ctx, req.(*EnableTimerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EnableTimerResp)
		return ctx.Result(200, reply)
	}
}

type GronHTTPClient interface {
	CreateTimer(ctx context.Context, req *CreateTimerRequest, opts ...http.CallOption) (rsp *CreateTimerResp, err error)
	EnableTimer(ctx context.Context, req *EnableTimerRequest, opts ...http.CallOption) (rsp *EnableTimerResp, err error)
}

type GronHTTPClientImpl struct {
	cc *http.Client
}

func NewGronHTTPClient(client *http.Client) GronHTTPClient {
	return &GronHTTPClientImpl{client}
}

func (c *GronHTTPClientImpl) CreateTimer(ctx context.Context, in *CreateTimerRequest, opts ...http.CallOption) (*CreateTimerResp, error) {
	var out CreateTimerResp
	pattern := "/gron/create_timer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGronCreateTimer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GronHTTPClientImpl) EnableTimer(ctx context.Context, in *EnableTimerRequest, opts ...http.CallOption) (*EnableTimerResp, error) {
	var out EnableTimerResp
	pattern := "/gron/enable_timer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGronEnableTimer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
